""" NerdTree
nnoremap <F2> :NERDTreeToggle<CR>

""" Taglist
nnoremap <F3> :TlistToggle<CR>

""" Switch.vim
nnoremap gs :Switch<CR>

""" Closetag.vim
let g:closetag_filenames = "*.html,*.xml,*.html.erb"

""" Pipe2Eval
let g:pipe2eval_map_key = '<Leader>el'

""" Fugitive
nnoremap <leader>gtc :Gcommit<CR>
nnoremap <leader>gtp :Gpush<CR>
nnoremap <leader>gtu :Gpull<CR>
nnoremap <leader>gtd :Gdiff<CR>
nnoremap <leader>gtb :Gblame<CR>

""" Vim-tags
" mostly obsolete now, smartgf is cooler than simple CTags
" let g:vim_tags_auto_generate = 1
" let g:vim_tags_use_vim_dispatch = 1

""" Syntastic
" let g:syntastic_ruby_checkers = ['rubocop']
" Alternative: 'mri'
" let g:syntastic_auto_jump = 3

""" Neomake
autocmd! BufWritePost * Neomake
let g:neomake_c_enabled_markers = ['clang']
let g:neomake_cpp_enabled_markers = ['clang++']
let g:neomake_coffeescript_enabled_markers = ['coffeelint']
let g:neomake_ruby_enabled_markers = ['rubocop']
let g:neomake_sh_enabled_markers = ['shellcheck']
let g:neomake_zsh_enabled_markers = ['shellcheck']
let g:neomake_jsx_enabled_markers = ['jsxlint']
let g:neomake_json_enabled_markers = ['jsonlint']
let g:neomake_javascript_enabled_markers = ['eslint']

""" CamelCase
map <S-W> <Plug>CamelCaseMotion_w
map <S-B> <Plug>CamelCaseMotion_b
map <S-E> <Plug>CamelCaseMotion_e

""" NerdTree
" Run Nerdtree on startup
" autocmd vimenter * if !argc() | NERDTree | endif
" If the only window left when quitting is NERDTree, then quit whole vim
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

""" Gist plugin settings
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1
let g:gist_post_private = 1
let g:gist_browser_command = 'firefox %URL%'

""" Signify plugin settings
let g:signify_vcs_list = [ 'git', 'hg' ]
" let g:signify_line_highlight = 1

""" Easy Align
vnoremap <leader>a= :EasyAlign =<CR>
vnoremap <leader>asp :EasyAlign *\ <CR>
vnoremap <leader>as1 :EasyAlign\ <CR>

""" indentLine
let g:indentLine_noConcealCursor=""

""" Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
let g:ack_autofold_results = 0
let g:ackpreview = 0
" let g:ack_default_options = " -s -H --nocolor --nogroup --column --smart-case"
let g:ack_default_options = " -s -H --nocolor --nogroup --column --smart-case --ignore-dir=log --ignore-dir=vendor --ignore-dir=tmp --ignore-dir=locale"
" let g:ack_use_dispatch = 1

" CtrlP
" let g:ctrlp_extensions = ['funky']
" let g:ctrlp_funky_syntax_highlight = 1
nmap <Leader>pp :CtrlP<CR>
nmap <Leader>pb :CtrlPBuffer<CR>
" nmap <Leader>pf :CtrlPFunky<CR>
nmap <Leader>pc :CtrlPCmdPalette<CR>
nmap <Leader>pm :CtrlPMRUFiles<CR>
nmap <leader>pr :ClearCtrlPCache<CR>

""" Github Comment
let g:github_user='swistak35'
let g:github_open_browser=1

""" Zeal
let g:zv_zeal_directory = "/usr/bin/zeal"
let g:zv_added_files_type = {
            \ 'rb': 'Ruby'
            \ }

""""""""" vim-man
" map <leader>

""" Incsearch.vim
set hlsearch
let g:incsearch#magic = '\v'
let g:incsearch#auto_nohlsearch = 1
map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

""" Smartgf
let g:smartgf_create_default_mappings = 0
let g:smartgf_auto_refresh_ctags = 0
let g:smartgf_enable_gems_search = 1
nmap gu <Plug>(smartgf-search)
vmap gu <Plug>(smartgf-search)
nmap gU <Plug>(smartgf-search-unfiltered)
vmap gU <Plug>(smartgf-search-unfiltered)
map <F4> :SmargfRefreshTags<CR>
" autocmd! BufWritePost * SmargfRefreshTags

""" vim-symbols-strings
" let g:symbolise_strings_map_keys = 0
" nnoremap <silent> <Leader>sy :set opfunc=symbolsstrings#SymboliseStrings<CR>g@
" nnoremap <silent> <Leader>st :set opfunc=symbolsstrings#StringifySymbols<CR>g@p

""" Yankstack
nmap [w <Plug>yankstack_substitute_older_paste
nmap ]w <Plug>yankstack_substitute_newer_paste

""" Vim-Tmux-Runner
let g:VtrPercentage = 15
let g:VtrClearEmptyLines = 1
let g:VtrInitialCommand = "ls"

""" vim-spec-runner
" let g:spec_runner_dispatcher = 'call VtrSendCommand("be {command}")'
" map <localleader>sc <Plug>RunCurrentSpecFile
" map <localleader>sf <Plug>RunFocusedSpec
" map <localleader>sr <Plug>RunMostRecentSpec

""" limelight
" let g:limelight_default_coefficient = 0.5
" let g:limelight_paragraph_span = 0
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!

""" vim-pencil
" augroup pencil
"   autocmd!
"   autocmd FileType markdown,mkd call pencil#init()
"   autocmd FileType text         call pencil#init()
" augroup END

""" ctrlp_delete
" let g:ctrlp_bdelete_map = '<c-_>'
" execute "nnoremap <buffer> <silent> ".g:ctrlp_bdelete_map." :call <sid>DeleteMarkedBuffers()<cr>"
" call ctrlp_bdelete#init()

""" vim-test
let test#strategy = "vtr"
nmap <silent> <localleader>tn :TestNearest<CR>
nmap <silent> <localleader>tf :TestFile<CR>
nmap <silent> <localleader>ts :TestSuite<CR>
nmap <silent> <localleader>tl :TestLast<CR>
nmap <silent> <localleader>tv :TestVisit<CR>

""" vim-snipmate
" imap <C-J> <ESC>a<Plug>snipMateNextOrTrigger
" smap <C-J> <ESC>a<Plug>snipMateNextOrTrigger

""" ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

""" rails.vim
nmap <localleader>rm :Rmigration<CR>

""" vim-blockle
let g:blockle_mapping = '<Leader>bl'
