#!/usr/bin/env ruby

require 'pathname'
require 'time'
require 'fileutils'
require 'tempfile'
require 'securerandom'
require 'nokogiri'
require 'time'

DEBUG_MODE = !!ENV["DEBUG"]

# TODO Use tags, for tags

DATE_FORMAT = "%Y-%m-%d"

path_in_arg = ARGV[0]
if File.directory?(File.expand_path(path_in_arg))
  puts "Directory given, looking for newest bookmark"
  all_bookmark_files = Dir.glob(File.join(File.expand_path(path_in_arg), "/bookmark_*.html"))
  newest_bookmark_file = all_bookmark_files.sort_by {|f| File.mtime(f) }.last
  path = Pathname.new(File.expand_path(newest_bookmark_file))
else
  path = Pathname.new(File.expand_path(ARGV[0]))
end

puts "Processing file '#{path}'"

def get_attribute(lines, attr, null_value: nil)
  line_with_attr = lines.find {|l| l.start_with?("#{attr}:") }
  attr_value = line_with_attr.sub("#{attr}:", "").strip
  if null_value && null_value == attr_value
    nil
  else
    attr_value
  end
end

def format_time(time)
  return nil if time.nil?
  "[#{time.strftime("%Y-%m-%d %H:%M:%S")}]"
end

content = File.read(path)
top_lines = content.split("\n")[0..30]
doc = Nokogiri::HTML.parse(content)

attrs = {
  uuid: SecureRandom.uuid,
  title: get_attribute(top_lines, "TITLE"),
  url: get_attribute(top_lines, "URL"),
  archival_date: Time.parse(get_attribute(top_lines, "DATE")),
  lang: get_attribute(top_lines, "LANGUAGE"),
  description: get_attribute(top_lines, "DESCRIPTION"),
  author: get_attribute(top_lines, "AUTHOR", null_value: "No author"),
  creator: get_attribute(top_lines, "CREATOR", null_value: "No creator"),
  publisher: get_attribute(top_lines, "PUBLISHER", null_value: "No publisher"),
}

pp attrs if DEBUG_MODE

if attrs[:url].include?("foreignaffairs.com")
  attrs[:publisher] = "Foreign Affairs"
end

if attrs[:url].include?("medium.com")
  attrs[:publisher] = "Medium"

  publish_date = doc.css("span[data-testid='storyPublishDate']")[0]&.content
  attrs[:date] = Time.parse(publish_date).to_date if publish_date
end

if attrs[:url].include?("https://x.com/") || attrs[:url].include?("https://twitter.com/")
  attrs[:kind] = "tweet"

  tweet_time = Time.parse(doc.css("time")[0].attributes["datetime"].value) + Time.zone_offset("CET")
  attrs[:date] = tweet_time

  author = doc.css("a div div span span")[0].content
  attrs[:author] = author

  # may not have content if tweet is just a picture
  content = doc.css("div[data-testid='tweetText']")[0]&.content
  attrs[:content] = content if content
end

entry = <<~EOS
** READ #{attrs[:title]}
   :PROPERTIES:
   :ID: #{attrs.fetch(:uuid)}
   :TITLE: #{attrs[:title]}
   :URL: #{attrs[:url]}
   :FILE: [[~/bookmarks/#{path.basename}]]
   :DATE: #{format_time(attrs[:date])}
   :ARCHIVAL_DATE: #{format_time(attrs[:archival_date] + Time.zone_offset("CET"))}
   :TAGS:
   :DESCRIPTION: #{attrs[:description]}
   :LANGUAGE: #{attrs[:lang]}
   :AUTHOR: #{attrs[:author]}
   :CREATOR: #{attrs[:creator]}
   :PUBLISHER: #{attrs[:publisher]}
EOS

if attrs[:kind]
  entry << <<EOS
   :KIND: #{attrs[:kind]}
EOS
end

entry << <<EOS
   :END:
#{attrs[:content]}
EOS

puts entry

Tempfile.open do |tempfile|
  tempfile.write(entry)
  tempfile.flush

  system("nvim #{tempfile.path}")

  tempfile.rewind
  entry = tempfile.read
end

confirmation = STDIN.gets.chomp

if confirmation == "rm"
  FileUtils.rm(path) unless DEBUG_MODE
  puts "File removed."
  exit
end

unless ["yes", "y"].include?(confirmation)
  puts "nothing done"
  exit
end

FileUtils.mv(path, File.expand_path("~/bookmarks/#{path.basename}")) unless DEBUG_MODE
puts "= File moved"

bookmarks_file = File.open(File.expand_path("~/notes/bookmarks.org"), "a") do |f|
  f.puts entry
end
