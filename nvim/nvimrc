
call plug#begin('~/.nvim/plugged')

exec 'source ' . $HOME . '/.vimrc_plugins'

call plug#end()

""""""""""""""""
"""" My options
""""""""""""""""
set nocompatible
set background=dark
set backspace=indent,eol,start
set backup
set noswapfile
set undofile
set history=50		" keep 50 lines of command line history
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
set ruler		" show the cursor position all the time
set wildmenu
set wildmode=list:longest,full
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.pyc,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.jpg,*.png,*.gif,*.avi,*.wmv,*.ogg,*.mp3,*.mov
set wildignore+=*/vendor/cache/*,*/.sass-cache/*,*/node_modules/*,*/bower_components/*
set wildignore+=*.swp,*~,._*
set number
set shiftround
set shiftwidth=2
set laststatus=2        " needed by Airline
set noshowmode          " as above
set smartcase
set scrolloff=5
set backupdir=~/.vim/tmp,.
set directory=~/.vim/swp,.
set undodir=~/.vim/undo,.
set expandtab         " Expand tabs to spaces
set tabstop=4
set exrc                " Per directory vimrc
set secure
set ignorecase          " Make command autocompletion case insensitive
set relativenumber
set gdefault            " Let's make global changing default
set autowriteall
set t_Co=256            " 256 colors support. Required by airline
set t_AB=^[[48;5;%dm
set t_AF=^[[38;5;%dm

""""""""""""""""
"""" A few different things
""""""""""""""""

" Don't use Ex mode, use Q for formatting
map Q g

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

 """Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END
else
  set autoindent		" always set autoindenting on
endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
			  \ | wincmd p | diffthis
endif

syntax enable
set background=dark
" Colorscheme
" if has('gui_running')
  colorscheme solarized
" endif


" let g:solarized_termcolors=16
" let g:solarized_termtrans=1

""""""""""""""""
"""""""" Maps
""""""""""""""""
nnoremap ; :
vnoremap ; :
let mapleader=","
let maplocalleader="\\"

" Save even if you don't have permissions
cmap w!! %!sudo tee > /dev/null %

" Display hidden characters
" nmap <leader>s :set nolist!<CR>

" Arrows? No. Just No. Not now.
nnoremap <Left> <C-w>h
nnoremap <Right> <C-w>l
nnoremap <Up> <C-w>k
nnoremap <Down> <C-w>j
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

nnoremap gJ J
nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
nnoremap J <C-D>
nnoremap K <C-U>
inoremap jj <ESC>
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Reloading config
nnoremap <leader>R :source ~/.nvimrc<CR>

nnoremap gn ;
nnoremap gN ,

" Redrawing the screen also removes the hightlight from search
noremap <silent> <C-l> :nohls<CR><C-l>

noremap [z :tabp<CR>
noremap ]z :tabn<CR>

" Look of invisible characters
set list
set listchars=tab:▸\ ,eol:¬

" Insert just one character
nnoremap s i_<ESC>r
nnoremap S a_<ESC>r

nnoremap Q @q

nnoremap <leader>bls :ls<CR>:b<Space>
nnoremap <leader>cy "*y

command! JoinLines execute "g/^$/,/./-j"

nnoremap <leader>w :wa<CR>

""""""""""""""""
""""""" Plugin settings
""""""""""""""""

exec 'source ' . $HOME . '/.vimrc_pluginrc'

""" Pastemode
nnoremap <F7> :set paste!<CR>

""" Other
cabbrev help tab help

""""""""""""""""
"""""""" Other functions
""""""""""""""""

" This allows for change paste motion cp{motion}
nmap <silent> cp :set opfunc=ChangePaste<CR>g@
function! ChangePaste(type, ...)
    silent exe "normal! `[v`]\"_c"
    silent exe "normal! p"
endfunction

" Create absent directories on edit
function! s:MkNonExDir(file, buf)
  if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
    let dir=fnamemodify(a:file, ':h')
    if !isdirectory(dir)
      call mkdir(dir, 'p')
    endif
  endif
endfunction
augroup BWCCreateDir
  autocmd!
  autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

" Remove trailing spaces after save
au BufWritePre *.json,*.rb,*.py,*.c,*.h,*.feature,*.conf,*rc,README,CHANGELOG,README.* :%s/\s\+$//e

" Because self is not python keyword stuff
syn keyword Keyword self

au BufNewFile,BufRead *.pl set filetype=prolog

